(defun read-input-file ()
  (with-output-to-string (out)
    (with-open-file (in "/mnt/hgfs/C/cygwin64/home/dlsmyth/adv17-1.in")
      (let ((data (make-string (file-length in))))
	(read-sequence data in)
	;; (format t "len ~A data is ~A~%" (file-length in) data)
	(return-from read-input-file (values (remove #\n data) (- (file-length in) 1)))))))

(defparameter *PART* 2)
(if (= 1 *PART*)
    (defmacro OTHER (i maxlen) `(mod (+ ,i 1) ,maxlen))
    (defmacro OTHER (i maxlen) `(mod (+ ,i (/ ,maxlen 2)) ,maxlen)))

(multiple-value-bind (inbuf inbuflen) (read-input-file)
  (let ((sum 0))
    (dotimes (i inbuflen)
      (if (char= (char inbuf i) (char inbuf (OTHER i inbuflen)))
	  (incf sum (- (char-code (char inbuf i)) (char-code #\0)))))
    (format t "~A~%" sum)))
